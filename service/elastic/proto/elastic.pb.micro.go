// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: elastic.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ElasticOperation service

func NewElasticOperationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ElasticOperation service

type ElasticOperationService interface {
	IndexExist(ctx context.Context, in *IndexExistRequest, opts ...client.CallOption) (*IndexExistResponse, error)
	SaveInfo(ctx context.Context, in *SaveInfoRequest, opts ...client.CallOption) (*SaveInfoResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error)
	SearchInfo(ctx context.Context, in *SearchInfoRequest, opts ...client.CallOption) (*SearchInfoResponse, error)
}

type elasticOperationService struct {
	c    client.Client
	name string
}

func NewElasticOperationService(name string, c client.Client) ElasticOperationService {
	return &elasticOperationService{
		c:    c,
		name: name,
	}
}

func (c *elasticOperationService) IndexExist(ctx context.Context, in *IndexExistRequest, opts ...client.CallOption) (*IndexExistResponse, error) {
	req := c.c.NewRequest(c.name, "ElasticOperation.IndexExist", in)
	out := new(IndexExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticOperationService) SaveInfo(ctx context.Context, in *SaveInfoRequest, opts ...client.CallOption) (*SaveInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ElasticOperation.SaveInfo", in)
	out := new(SaveInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticOperationService) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ElasticOperation.GetInfo", in)
	out := new(GetInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticOperationService) SearchInfo(ctx context.Context, in *SearchInfoRequest, opts ...client.CallOption) (*SearchInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ElasticOperation.SearchInfo", in)
	out := new(SearchInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ElasticOperation service

type ElasticOperationHandler interface {
	IndexExist(context.Context, *IndexExistRequest, *IndexExistResponse) error
	SaveInfo(context.Context, *SaveInfoRequest, *SaveInfoResponse) error
	GetInfo(context.Context, *GetInfoRequest, *GetInfoResponse) error
	SearchInfo(context.Context, *SearchInfoRequest, *SearchInfoResponse) error
}

func RegisterElasticOperationHandler(s server.Server, hdlr ElasticOperationHandler, opts ...server.HandlerOption) error {
	type elasticOperation interface {
		IndexExist(ctx context.Context, in *IndexExistRequest, out *IndexExistResponse) error
		SaveInfo(ctx context.Context, in *SaveInfoRequest, out *SaveInfoResponse) error
		GetInfo(ctx context.Context, in *GetInfoRequest, out *GetInfoResponse) error
		SearchInfo(ctx context.Context, in *SearchInfoRequest, out *SearchInfoResponse) error
	}
	type ElasticOperation struct {
		elasticOperation
	}
	h := &elasticOperationHandler{hdlr}
	return s.Handle(s.NewHandler(&ElasticOperation{h}, opts...))
}

type elasticOperationHandler struct {
	ElasticOperationHandler
}

func (h *elasticOperationHandler) IndexExist(ctx context.Context, in *IndexExistRequest, out *IndexExistResponse) error {
	return h.ElasticOperationHandler.IndexExist(ctx, in, out)
}

func (h *elasticOperationHandler) SaveInfo(ctx context.Context, in *SaveInfoRequest, out *SaveInfoResponse) error {
	return h.ElasticOperationHandler.SaveInfo(ctx, in, out)
}

func (h *elasticOperationHandler) GetInfo(ctx context.Context, in *GetInfoRequest, out *GetInfoResponse) error {
	return h.ElasticOperationHandler.GetInfo(ctx, in, out)
}

func (h *elasticOperationHandler) SearchInfo(ctx context.Context, in *SearchInfoRequest, out *SearchInfoResponse) error {
	return h.ElasticOperationHandler.SearchInfo(ctx, in, out)
}
