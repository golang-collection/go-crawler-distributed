// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: redis.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RedisOperation service

func NewRedisOperationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RedisOperation service

type RedisOperationService interface {
	SetString(ctx context.Context, in *Request, opts ...client.CallOption) (*StringResponse, error)
	GetString(ctx context.Context, in *Request, opts ...client.CallOption) (*StringResponse, error)
	AddElementToSet(ctx context.Context, in *Request, opts ...client.CallOption) (*IntResponse, error)
	ElementIsInSet(ctx context.Context, in *Request, opts ...client.CallOption) (*BoolResponse, error)
	GetAllElementFromSet(ctx context.Context, in *Request, opts ...client.CallOption) (*StringsResponse, error)
}

type redisOperationService struct {
	c    client.Client
	name string
}

func NewRedisOperationService(name string, c client.Client) RedisOperationService {
	return &redisOperationService{
		c:    c,
		name: name,
	}
}

func (c *redisOperationService) SetString(ctx context.Context, in *Request, opts ...client.CallOption) (*StringResponse, error) {
	req := c.c.NewRequest(c.name, "RedisOperation.SetString", in)
	out := new(StringResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisOperationService) GetString(ctx context.Context, in *Request, opts ...client.CallOption) (*StringResponse, error) {
	req := c.c.NewRequest(c.name, "RedisOperation.GetString", in)
	out := new(StringResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisOperationService) AddElementToSet(ctx context.Context, in *Request, opts ...client.CallOption) (*IntResponse, error) {
	req := c.c.NewRequest(c.name, "RedisOperation.AddElementToSet", in)
	out := new(IntResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisOperationService) ElementIsInSet(ctx context.Context, in *Request, opts ...client.CallOption) (*BoolResponse, error) {
	req := c.c.NewRequest(c.name, "RedisOperation.ElementIsInSet", in)
	out := new(BoolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisOperationService) GetAllElementFromSet(ctx context.Context, in *Request, opts ...client.CallOption) (*StringsResponse, error) {
	req := c.c.NewRequest(c.name, "RedisOperation.GetAllElementFromSet", in)
	out := new(StringsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RedisOperation service

type RedisOperationHandler interface {
	SetString(context.Context, *Request, *StringResponse) error
	GetString(context.Context, *Request, *StringResponse) error
	AddElementToSet(context.Context, *Request, *IntResponse) error
	ElementIsInSet(context.Context, *Request, *BoolResponse) error
	GetAllElementFromSet(context.Context, *Request, *StringsResponse) error
}

func RegisterRedisOperationHandler(s server.Server, hdlr RedisOperationHandler, opts ...server.HandlerOption) error {
	type redisOperation interface {
		SetString(ctx context.Context, in *Request, out *StringResponse) error
		GetString(ctx context.Context, in *Request, out *StringResponse) error
		AddElementToSet(ctx context.Context, in *Request, out *IntResponse) error
		ElementIsInSet(ctx context.Context, in *Request, out *BoolResponse) error
		GetAllElementFromSet(ctx context.Context, in *Request, out *StringsResponse) error
	}
	type RedisOperation struct {
		redisOperation
	}
	h := &redisOperationHandler{hdlr}
	return s.Handle(s.NewHandler(&RedisOperation{h}, opts...))
}

type redisOperationHandler struct {
	RedisOperationHandler
}

func (h *redisOperationHandler) SetString(ctx context.Context, in *Request, out *StringResponse) error {
	return h.RedisOperationHandler.SetString(ctx, in, out)
}

func (h *redisOperationHandler) GetString(ctx context.Context, in *Request, out *StringResponse) error {
	return h.RedisOperationHandler.GetString(ctx, in, out)
}

func (h *redisOperationHandler) AddElementToSet(ctx context.Context, in *Request, out *IntResponse) error {
	return h.RedisOperationHandler.AddElementToSet(ctx, in, out)
}

func (h *redisOperationHandler) ElementIsInSet(ctx context.Context, in *Request, out *BoolResponse) error {
	return h.RedisOperationHandler.ElementIsInSet(ctx, in, out)
}

func (h *redisOperationHandler) GetAllElementFromSet(ctx context.Context, in *Request, out *StringsResponse) error {
	return h.RedisOperationHandler.GetAllElementFromSet(ctx, in, out)
}
